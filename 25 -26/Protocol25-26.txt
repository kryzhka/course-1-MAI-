
vktitov@vktitov-laptop ~/Рабочий стол/Lab25-26 $ ls
hello.cpp  Makefile  stack.cpp  stack.h
vktitov@vktitov-laptop ~/Рабочий стол/Lab25-26 $ cat stack.h
#define N 100
#define Tvalue int

struct Stack
{ int first;
 Tvalue body[N];
};

void Init(Stack &S)
{ S.first=0; }

int Empty(Stack S)
{return S.first==0;}

void Push(Stack &S, Tvalue V)
{ if(S.first==N) printf("STACK IS OVERFLOW");
   else S.body[S.first++]=V;
}

Tvalue Pop(Stack &S)
{ if(Empty(S)) printf("STACK IS EMPTY");
  else return S.body[--S.first];
}

Tvalue Top(Stack S)
{ if(Empty(S)) printf("STACK IS EMPTY");
  else return S.body[S.first-1];
}

int Size(Stack S){return S.first;}


void Display(Stack S)
{ printf("[ ");
for(int i=0;i<S.first;i++) printf("%d ",S.body[i]);
  printf("]\n");
}
/*
void Cat(Stack &S1, Stack &S2)
{ Stack S3; Tvalue V;
 Init(S3);
  while(!Empty(S2))
  { V=Pop(S2); Push(S3,V); }

  while(!Empty(S3))
  { V=Pop(S3); Push(S1,V); }
}
*/
void Cat(Stack &S1, Stack &S2)
{ Tvalue V;
  if(!Empty(S2))
  { V=Pop(S2); Cat(S1,S2); Push(S1,V);}
}

void Append(Stack &S1, Stack &S2)
{ Tvalue V;
  if(Empty(S1)) Cat(S1,S2);
  else { V=Pop(S1);
	 Append(S1,S2);
	 Push(S1,V);
       }
}

vktitov@vktitov-laptop ~/Рабочий стол/Lab25-26 $ cat stack.cpp
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include"stack.h"

void QuickSort(Stack &S)
{ Stack S1,S2; Tvalue V, V1;
  if(!Empty(S))
  { Init(S1); Init(S2);
    V=Pop(S);
    while(!Empty(S))
    { V1=Pop(S);
      if(V1<V) Push(S1,V1);
       else Push(S2,V1);
    }
   QuickSort(S1);
   QuickSort(S2);
   Push(S2,V);
   Append(S1,S2);
   Cat(S,S1);
  }
}

void randomize() {time_t t; srand(time(&t));}

int main()
{ randomize(); Stack S;
 Init(S); Tvalue v; int k;
 printf("1. Fill randly stack.\n2. Print stack.\n3. Push value.\n4. Pop value.\n"
         "5. Read top value.\n6. Size of stack.\n7. Sorting of stack.\n"
		 "8. Print Menu.\n0. Exit.\n");
 while(1)
  { printf("Type number of Menu:"); scanf("%d",&k);
    if(k==1) { int s; printf("Type length of stack (<100):"); scanf("%d",&s);
               while(s--) Push(S,rand()%100);
             } else			   
    if(k==2) Display(S); else
	if(k==3) { Tvalue v; printf("Input value:"); scanf("%d",&v); Push(S,v);} else
	if(k==4) printf(" Popped: %d.\n", Pop(S)); else
	if(k==5) printf("Top = %d.\n", Top(S)); else
	if(k==6) printf("Size of stack = %d.\n", Size(S)); else
	if(k==7) QuickSort(S); else
	if(k==8) printf("1. Fill randly stack.\n2. Print stack.\n3. Push value.\n4. Pop value.\n"
         "5. Read top value.\n6. Size of stack.\n7. Sorting of stack.\n"
		 "8. Print Menu.\n0. Exit.\n"); else
	if(k==0) break;
  }	return 0;
} // main 
 
vktitov@vktitov-laptop ~/Рабочий стол/Lab25-26 $ cat hello.cpp
#include <stdio.h>
void hello()
{
	printf("Hello World!\n");
}vktitov@vktitov-laptop ~/Рабочий стол/Lab25-26 $ cat Makefile
stack.exe: stack.o hello.o
	g++ -c -o stack.o stack.cpp
	g++ -o stack.exe stack.o hello.o
stack.o hello.o: stack.h
vktitov@vktitov-laptop ~/Рабочий стол/Lab25-26 $ ls
hello.cpp  Makefile  stack.cpp  stack.h
vktitov@vktitov-laptop ~/Рабочий стол/Lab25-26 $ make
g++    -c -o stack.o stack.cpp
g++    -c -o hello.o hello.cpp
g++ -c -o stack.o stack.cpp
g++ -o stack.exe stack.o hello.o
vktitov@vktitov-laptop ~/Рабочий стол/Lab25-26 $ ls
hello.cpp  hello.o  Makefile  stack.cpp  stack.exe  stack.h  stack.o
vktitov@vktitov-laptop ~/Рабочий стол/Lab25-26 $ stack.exe
1. Fill randly stack.
2. Print stack.
3. Push value.
4. Pop value.
5. Read top value.
6. Size of stack.
7. Sorting of stack.
8. Print Menu.
0. Exit.
Type number of Menu:1
Type length of stack (<100):20
Type number of Menu:2
[ 8 93 74 12 73 66 76 52 62 0 53 13 48 74 40 41 35 41 51 49 ]
Type number of Menu:3
Input value:55
Type number of Menu:2
[ 8 93 74 12 73 66 76 52 62 0 53 13 48 74 40 41 35 41 51 49 55 ]
Type number of Menu:6
Size of stack = 21.
Type number of Menu:7
Type number of Menu:2
[ 93 76 74 74 73 66 62 55 53 52 51 49 48 41 41 40 35 13 12 8 0 ]
Type number of Menu:5
Top = 0.
Type number of Menu:4
 Popped: 0.
Type number of Menu:2
[ 93 76 74 74 73 66 62 55 53 52 51 49 48 41 41 40 35 13 12 8 ]
Type number of Menu:8
1. Fill randly stack.
2. Print stack.
3. Push value.
4. Pop value.
5. Read top value.
6. Size of stack.
7. Sorting of stack.
8. Print Menu.
0. Exit.
Type number of Menu:3
Input value:56
Type number of Menu:2
[ 93 76 74 74 73 66 62 55 53 52 51 49 48 41 41 40 35 13 12 8 56 ]
Type number of Menu:7
Type number of Menu:2
[ 93 76 74 74 73 66 62 56 55 53 52 51 49 48 41 41 40 35 13 12 8 ]
Type number of Menu:0
vktitov@vktitov-laptop ~/Рабочий стол/Lab25-26 $ 

